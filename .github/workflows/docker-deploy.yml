name: Deploy to EC2 instance
on:
  push:
    branches:
      - master
env:
  HOST: 54.82.57.48
  USER: root

jobs:
  Build-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Create EC2 instance
        id: ec2
        run: aws ec2 run-instances --image-id ami-005f9685cb30f234b --instance-type t2.micro --key-name Devops_Project_Key --subnet-id subnet-020947d6155dd1c85 --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=my-instance}]'
          #uses: shreyasingh18/Packer-AWS-Actions
          #with:
          #image-id: ami-005f9685cb30f234b
          #instance-type: t2.micro
          #subnet-id: subnet-020947d6155dd1c85
          #security-group-ids: sg-0a35ae1155f32dfad
          #key-name: Devops_Project_Key
          #user-data: |
            #!/bin/bash
            #echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections
            #sudo yum update
            #sudo apt-get install -y python3-pip python3-dev
            #sudo apt-get install -y libssl-dev libffi-dev python3-setuptools

      - name: Get IP address
        run: |
            INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            INSTANCE_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
            echo "Public IP: $INSTANCE_IP"

      - name: SSH keys
        uses: tanmancan/action-setup-ssh-agent-key@1.0.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-public-key: ${{ secrets.SSH_PUBLIC_KEY }}
          ssh-known-hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Connect over SSH
        run: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=~/.ssh/known_hosts -T ${{ env.USER }}@${{ env.HOST }}


      - name: Deploy Docker with Ansible
        uses: hengkx/ssh-deploy@v1.0.1
        with:
          #PASSWORD: ${{ secrets.SSH_PRIVATE_KEY }}
          #ssh-known-hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          USERNAME: root
          HOST: ${{ steps.ec2.outputs.public_ip }}
          PORT: 22
          SOURCE: .
          TARGET: /home/ec2-user
          AFTER_COMMAND: ansible-playbook playbook.yml -e "host=${{ steps.ec2.outputs.public_ip }}"
          
      - name: Deploy a web application on container
        run: |
             docker cp index.html apache-server:/usr/local/apache2/htdocs/
             docker restart apache-server


